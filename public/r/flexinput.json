{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "flexinput",
  "type": "registry:ui",
  "title": "flexinput",
  "description": "custom input component for your next AI application",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "textarea",
    "dialog",
    "form",
    "scroll-area"
  ],
  "files": [
    {
      "path": "src/components/flexinput.tsx",
      "content": "\"use client\";\n\nimport { useRef, useState } from \"react\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { Form, FormControl, FormField, FormItem } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogTitle } from \"@/components/ui/dialog\";\nimport { ArrowUp, Loader2, Plus, X } from \"lucide-react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport Image from \"next/image\";\nimport { cn } from \"@/lib/utils\";\n\nconst formSchema = z.object({\n  text: z.string().optional(),\n});\n\nexport function FlexInput() {\n  const [isDragging, setIsDragging] = useState(false);\n  const [images, setImages] = useState<string[]>([]);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [selectedImage, setSelectedImage] = useState<string>(\"\");\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      text: \"\",\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsSubmitting(true);\n    try {\n      // Implement submit logic here\n      await new Promise((resolve) => setTimeout(resolve, 5000));\n      console.log(values.text);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  function handlePaste(event: React.ClipboardEvent<HTMLTextAreaElement>) {\n    const items = event.clipboardData.items;\n    const newImages: string[] = [];\n\n    for (const item of items) {\n      if (item.type.startsWith(\"image\")) {\n        const file = item.getAsFile();\n        if (file) {\n          const imageURL = URL.createObjectURL(file);\n          newImages.push(imageURL);\n        }\n      }\n    }\n\n    if (newImages.length > 0) {\n      setImages((prev) => [...prev, ...newImages]);\n    }\n  }\n\n  function removeImage(index: number) {\n    setImages((prev) => prev.filter((_, i) => i !== index));\n  }\n\n  function handleDrop(event: React.DragEvent<HTMLDivElement>) {\n    event.preventDefault();\n    setIsDragging(false);\n\n    const files = Array.from(event.dataTransfer.files);\n    const imageFiles = files.filter((file) => file.type.startsWith(\"image/\"));\n\n    if (imageFiles.length > 0) {\n      const imageURLs = imageFiles.map((file) => URL.createObjectURL(file));\n      setImages((prev) => [...prev, ...imageURLs]);\n    }\n  }\n\n  function handleDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    event.preventDefault();\n    setIsDragging(true);\n  }\n\n  function handleDragOver(event: React.DragEvent<HTMLDivElement>) {\n    event.preventDefault();\n  }\n\n  function handleDragLeave() {\n    setIsDragging(false);\n  }\n  function handleFileSelect() {\n    fileInputRef.current?.click();\n  }\n\n  function handleFileChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const files = Array.from(event.target.files || []);\n    const imageFiles = files.filter((file) => file.type.startsWith(\"image/\"));\n\n    if (imageFiles.length > 0) {\n      const imageURLs = imageFiles.map((file) => URL.createObjectURL(file));\n      setImages((prev) => [...prev, ...imageURLs]);\n    }\n    event.target.value = \"\";\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLTextAreaElement>) {\n    if (event.key === \"Enter\" && !event.shiftKey) {\n      event.preventDefault();\n      form.handleSubmit(onSubmit)();\n    }\n  }\n\n  function previewImage(index: number) {\n    return () => {\n      setSelectedImage(images[index]);\n      setIsDialogOpen(true);\n    };\n  }\n\n  return (\n    <div\n      className={cn(\n        \"relative w-full max-w-2xl mx-auto border rounded-lg p-1\",\n        isDragging && \"border-dashed\"\n      )}\n      onDrop={handleDrop}\n      onDragEnter={handleDragEnter}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n    >\n      <input\n        type=\"file\"\n        ref={fileInputRef}\n        onChange={handleFileChange}\n        accept=\"image/*\"\n        multiple\n        className=\"hidden\"\n      />\n      {images.length > 0 && (\n        <ScrollArea>\n          <div className=\"flex flex-wrap gap-3 p-1 max-h-[150px]\">\n            {images.map((image, index) => (\n              <div\n                key={index}\n                className=\"relative size-[120px] cursor-pointer rounded-md overflow-hidden\"\n              >\n                <Image\n                  src={image}\n                  alt={`image ${index + 1}`}\n                  width={120}\n                  height={120}\n                  className=\"object-cover w-full h-full\"\n                  onClick={previewImage(index)}\n                />\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={() => removeImage(index)}\n                  className=\"focus-visible:ring-0 absolute top-1 right-1 h-5 w-5 cursor-pointer rounded-full p-0\"\n                >\n                  <X className=\"w-3 h-3\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n        </ScrollArea>\n      )}\n      <Form {...form}>\n        <form\n          onSubmit={form.handleSubmit(onSubmit)}\n          className=\"relative flex items-end\"\n        >\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={handleFileSelect}\n            className=\"focus-visible:ring-0 cursor-pointer\"\n          >\n            <Plus className=\"w-4 h-4 text-muted-foreground\" />\n          </Button>\n          <FormField\n            control={form.control}\n            name=\"text\"\n            render={({ field }) => (\n              <FormItem className=\"w-full min-h-9\">\n                <FormControl>\n                  <Textarea\n                    autoFocus\n                    onPaste={handlePaste}\n                    onKeyDown={handleKeyDown}\n                    className=\"resize-none focus-visible:ring-0 border-none min-h-9 shadow-none px-1\"\n                    rows={1}\n                    placeholder=\"Enter your prompt here\"\n                    {...field}\n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n          <Button\n            type=\"submit\"\n            variant=\"ghost\"\n            size=\"icon\"\n            disabled={isSubmitting || form.watch(\"text\")?.trim() === \"\"}\n            className=\"focus-visible:ring-0 disabled:!pointer-events-auto disabled:!cursor-not-allowed cursor-pointer\"\n          >\n            {isSubmitting ? (\n              <Loader2 className=\"w-4 h-4 text-muted-foreground animate-spin\" />\n            ) : (\n              <ArrowUp className=\"w-4 h-4 text-muted-foreground\" />\n            )}\n          </Button>\n        </form>\n      </Form>\n\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent\n          onClick={() => setIsDialogOpen(false)}\n          onOpenAutoFocus={(e) => e.preventDefault()}\n          className=\"sm:max-w-screen h-screen border-none rounded-none bg-black/30 overflow-hidden\"\n        >\n          <DialogTitle className=\"sr-only\">Image Preview</DialogTitle>\n          {selectedImage && (\n            <div className=\"relative w-full h-full flex items-center justify-center\">\n              <Image\n                src={selectedImage}\n                alt=\"Preview\"\n                width={800}\n                height={600}\n                className=\"max-w-full max-h-[80vh] object-contain\"\n              />\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}