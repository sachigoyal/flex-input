{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "flexinput",
  "type": "registry:ui",
  "title": "flexinput",
  "description": "custom input component for your next AI application",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "textarea",
    "dialog",
    "form",
    "scroll-area"
  ],
  "files": [
    {
      "path": "src/components/flexinput.tsx",
      "content": "\"use client\";\r\n\r\nimport { useRef, useState } from \"react\";\r\nimport { z } from \"zod\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Form, FormControl, FormField, FormItem } from \"@/components/ui/form\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Dialog, DialogContent, DialogTitle } from \"@/components/ui/dialog\";\r\nimport { ArrowUp, Loader2, Plus, X } from \"lucide-react\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport Image from \"next/image\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst formSchema = z.object({\r\n  text: z.string().optional(),\r\n});\r\n\r\nexport function FlexInput() {\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [images, setImages] = useState<string[]>([]);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [selectedImage, setSelectedImage] = useState<string>(\"\");\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const form = useForm<z.infer<typeof formSchema>>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      text: \"\",\r\n    },\r\n  });\r\n\r\n  async function onSubmit(values: z.infer<typeof formSchema>) {\r\n    setIsSubmitting(true);\r\n    try {\r\n      // Implement submit logic here\r\n      await new Promise((resolve) => setTimeout(resolve, 5000));\r\n      console.log(values.text);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  }\r\n\r\n  function handlePaste(event: React.ClipboardEvent<HTMLTextAreaElement>) {\r\n    const items = event.clipboardData.items;\r\n    const newImages: string[] = [];\r\n\r\n    for (const item of items) {\r\n      if (item.type.startsWith(\"image\")) {\r\n        const file = item.getAsFile();\r\n        if (file) {\r\n          const imageURL = URL.createObjectURL(file);\r\n          newImages.push(imageURL);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (newImages.length > 0) {\r\n      setImages((prev) => [...prev, ...newImages]);\r\n    }\r\n  }\r\n\r\n  function removeImage(index: number) {\r\n    setImages((prev) => prev.filter((_, i) => i !== index));\r\n  }\r\n\r\n  function handleDrop(event: React.DragEvent<HTMLDivElement>) {\r\n    event.preventDefault();\r\n    setIsDragging(false);\r\n\r\n    const files = Array.from(event.dataTransfer.files);\r\n    const imageFiles = files.filter((file) => file.type.startsWith(\"image/\"));\r\n\r\n    if (imageFiles.length > 0) {\r\n      const imageURLs = imageFiles.map((file) => URL.createObjectURL(file));\r\n      setImages((prev) => [...prev, ...imageURLs]);\r\n    }\r\n  }\r\n\r\n  function handleDragEnter(event: React.DragEvent<HTMLDivElement>) {\r\n    event.preventDefault();\r\n    setIsDragging(true);\r\n  }\r\n\r\n  function handleDragOver(event: React.DragEvent<HTMLDivElement>) {\r\n    event.preventDefault();\r\n  }\r\n\r\n  function handleDragLeave() {\r\n    setIsDragging(false);\r\n  }\r\n  function handleFileSelect() {\r\n    fileInputRef.current?.click();\r\n  }\r\n\r\n  function handleFileChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n    const files = Array.from(event.target.files || []);\r\n    const imageFiles = files.filter((file) => file.type.startsWith(\"image/\"));\r\n\r\n    if (imageFiles.length > 0) {\r\n      const imageURLs = imageFiles.map((file) => URL.createObjectURL(file));\r\n      setImages((prev) => [...prev, ...imageURLs]);\r\n    }\r\n    event.target.value = \"\";\r\n  }\r\n\r\n  function handleKeyDown(event: React.KeyboardEvent<HTMLTextAreaElement>) {\r\n    if (event.key === \"Enter\" && !event.shiftKey) {\r\n      event.preventDefault();\r\n      form.handleSubmit(onSubmit)();\r\n    }\r\n  }\r\n\r\n  function previewImage(index: number) {\r\n    return () => {\r\n      setSelectedImage(images[index]);\r\n      setIsDialogOpen(true);\r\n    };\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"relative w-full max-w-2xl mx-auto border rounded-lg p-1\",\r\n        isDragging && \"border-dashed\"\r\n      )}\r\n      onDrop={handleDrop}\r\n      onDragEnter={handleDragEnter}\r\n      onDragOver={handleDragOver}\r\n      onDragLeave={handleDragLeave}\r\n    >\r\n      <input\r\n        type=\"file\"\r\n        ref={fileInputRef}\r\n        onChange={handleFileChange}\r\n        accept=\"image/*\"\r\n        multiple\r\n        className=\"hidden\"\r\n      />\r\n      {images.length > 0 && (\r\n        <ScrollArea>\r\n          <div className=\"flex flex-wrap gap-3 p-1 max-h-[150px]\">\r\n            {images.map((image, index) => (\r\n              <div\r\n                key={index}\r\n                className=\"relative size-[120px] cursor-pointer rounded-md overflow-hidden\"\r\n              >\r\n                <Image\r\n                  src={image}\r\n                  alt={`image ${index + 1}`}\r\n                  width={120}\r\n                  height={120}\r\n                  className=\"object-cover w-full h-full\"\r\n                  onClick={previewImage(index)}\r\n                />\r\n                <Button\r\n                  variant=\"secondary\"\r\n                  size=\"sm\"\r\n                  onClick={() => removeImage(index)}\r\n                  className=\"focus-visible:ring-0 absolute top-1 right-1 h-5 w-5 cursor-pointer rounded-full p-0\"\r\n                >\r\n                  <X className=\"w-3 h-3\" />\r\n                </Button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </ScrollArea>\r\n      )}\r\n      <Form {...form}>\r\n        <form\r\n          onSubmit={form.handleSubmit(onSubmit)}\r\n          className=\"relative flex items-end\"\r\n        >\r\n          <Button\r\n            type=\"button\"\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            onClick={handleFileSelect}\r\n            className=\"focus-visible:ring-0 cursor-pointer\"\r\n          >\r\n            <Plus className=\"w-4 h-4 text-muted-foreground\" />\r\n          </Button>\r\n          <FormField\r\n            control={form.control}\r\n            name=\"text\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"w-full min-h-9\">\r\n                <FormControl>\r\n                  <Textarea\r\n                    autoFocus\r\n                    onPaste={handlePaste}\r\n                    onKeyDown={handleKeyDown}\r\n                    className=\"resize-none focus-visible:ring-0 border-none min-h-9 shadow-none px-1 bg-transparent dark:bg-transparent\"\r\n                    rows={1}\r\n                    placeholder=\"Enter your prompt here\"\r\n                    {...field}\r\n                  />\r\n                </FormControl>\r\n              </FormItem>\r\n            )}\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"ghost\"\r\n            size=\"icon\"\r\n            disabled={isSubmitting || form.watch(\"text\")?.trim() === \"\"}\r\n            className=\"focus-visible:ring-0 disabled:!pointer-events-auto disabled:!cursor-not-allowed cursor-pointer\"\r\n          >\r\n            {isSubmitting ? (\r\n              <Loader2 className=\"w-4 h-4 text-muted-foreground animate-spin\" />\r\n            ) : (\r\n              <ArrowUp className=\"w-4 h-4 text-muted-foreground\" />\r\n            )}\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n\r\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\r\n        <DialogContent\r\n          onClick={() => setIsDialogOpen(false)}\r\n          onOpenAutoFocus={(e) => e.preventDefault()}\r\n          className=\"sm:max-w-screen h-screen border-none rounded-none bg-black/30 overflow-hidden\"\r\n        >\r\n          <DialogTitle className=\"sr-only\">Image Preview</DialogTitle>\r\n          {selectedImage && (\r\n            <div className=\"relative w-full h-full flex items-center justify-center\">\r\n              <Image\r\n                src={selectedImage}\r\n                alt=\"Preview\"\r\n                width={800}\r\n                height={600}\r\n                className=\"max-w-full max-h-[80vh] object-contain\"\r\n              />\r\n            </div>\r\n          )}\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}